<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:security="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc
             http://www.springframework.org/schema/mvc/spring-mvc.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd ">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

    <!--Property placeholder-->
    <context:property-placeholder location="classpath:ds-hibernate-cfg.properties" />

	<!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven/>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.pablo.springCRUD1" />

    <beans:bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
                destroy-method="close">
        <beans:property name="driverClassName" value="${ds.database-driver}" />
        <beans:property name="url" value="${ds.url}" />
        <beans:property name="username" value="${ds.username}"/>
        <beans:property name="password" value="${ds.password}" />
    </beans:bean>

    <!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean name="hibernate4AnnotatedSessionFactory"
                class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.pablo.springCRUD1.Entity.Client</beans:value>
                <beans:value>com.pablo.springCRUD1.Entity.Address</beans:value>
                <beans:value>com.pablo.springCRUD1.Entity.Car</beans:value>
                <beans:value>com.pablo.springCRUD1.Entity.Employee</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
                <beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
                <beans:prop key="hibernate.ddl-auto=create-drop">${hibernate.hbm2ddl.auto}</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>

    <!--Models mapping-->
    <!--AddressDAO bean-->
    <beans:bean name="addressDAO" class="com.pablo.springCRUD1.dao.AddressDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

    <beans:bean name="addressService" class="com.pablo.springCRUD1.service.AddressServiceImpl">
        <beans:property name="addressDAO" ref="addressDAO"/>
    </beans:bean>

    <!--Employee bean-->
    <beans:bean name="employeeDAO" class="com.pablo.springCRUD1.dao.EmployeeDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

    <beans:bean name="employeeService" class="com.pablo.springCRUD1.service.EmployeeServiceImpl">
        <beans:property name="employeeDAO" ref="employeeDAO"/>
    </beans:bean>

    <!--Car bean-->
    <beans:bean name="carDAO" class="com.pablo.springCRUD1.dao.CarDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

    <beans:bean name="carService" class="com.pablo.springCRUD1.service.CarServiceImpl">
        <beans:property name="carDAO" ref="carDAO"/>
    </beans:bean>

    <!--Client bean-->
    <beans:bean name="clientDAO" class="com.pablo.springCRUD1.dao.ClientDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

    <beans:bean name="clientService" class="com.pablo.springCRUD1.service.ClientServiceImpl">
        <beans:property name="clientDAO" ref="clientDAO"/>
    </beans:bean>

    <!--Transaction Manager bean-->
    <beans:bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <context:component-scan base-package="com.pablo.springCRUD1" />
    <!-- Spring security beans -->
    <security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled" />
</beans:beans>